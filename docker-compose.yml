services:

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: "server.1=zookeeper:2888:3888"
      ZOO_PORT: 2181
    healthcheck:
      test: [ "CMD", "echo", "ruok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
  api-gateway-service:
    build: api-gateway-service
    image: flight-booking-service
    container_name: flight-booking-service-gateway
    ports:
      - "8080:8080"
    environment:
    -  user-url=user-service:7070/users
    depends_on:
     - kafka
     - flights-bookings-db
  user-service:
    build: user-service
    image: flight-booking-service-user-service
    container_name: flight-booking-service-user-service
    ports:
      - "7070:7070"
    environment:
      - SERVER_PORT-7070
      - SPRING_DATASOURCE_URL=jdbc:postgresql://flights-bookings-db:5432/flight_bookings
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      flights-bookings-db:
        condition: service_healthy
#  orchestrator-service:
#    build: orchestrator-service
#    image: flight-booking-service
#    container_name: flight-booking-service-orchestrator
#    ports:
#      - "9090:9090"
#    depends_on:
#      - kafka
  flights-bookings-db:
    image: postgres:16.1
    container_name: postgres-flights-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=flight_bookings
    volumes:
      - flights-volume:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      interval: 5s
      retries: 10

volumes:
  flights-volume:

